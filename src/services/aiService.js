// Service pour l'intelligence artificielle
import { exercises, workoutPlans, aiWorkoutGenerator } from '../data/exercises';

class AIService {
  constructor() {
    this.conversationHistory = [];
    this.userPreferences = {};
  }

  // G√©n√©ration de r√©ponse IA bas√©e sur le contexte
  async generateResponse(userMessage, context = {}) {
    const response = await this.processMessage(userMessage, context);
    this.conversationHistory.push({
      user: userMessage,
      ai: response,
      timestamp: new Date(),
    });
    return response;
  }

  // Traitement des messages utilisateur
  async processMessage(message, context) {
    const lowerMessage = message.toLowerCase();
    
    // D√©tection d'intention
    const intent = this.detectIntent(lowerMessage);
    
    switch (intent) {
      case 'workout_advice':
        return this.getWorkoutAdvice(message, context);
      case 'nutrition_advice':
        return this.getNutritionAdvice(message, context);
      case 'injury_prevention':
        return this.getInjuryPreventionAdvice(message, context);
      case 'motivation':
        return this.getMotivationalMessage(message, context);
      case 'exercise_question':
        return this.getExerciseAnswer(message, context);
      case 'general_question':
        return this.getGeneralAnswer(message, context);
      default:
        return this.getDefaultResponse(message, context);
    }
  }

  // D√©tection de l'intention du message
  detectIntent(message) {
    const workoutKeywords = ['entra√Ænement', 'exercice', 'sport', 'musculation', 'cardio', 's√©ance'];
    const nutritionKeywords = ['alimentation', 'nutrition', 'r√©gime', 'manger', 'calories', 'prot√©ines'];
    const injuryKeywords = ['blessure', 'douleur', 'pr√©vention', '√©chauffement', '√©tirement'];
    const motivationKeywords = ['motivation', 'd√©courag√©', 'difficile', 'abandonner', 'continuer'];
    const exerciseKeywords = ['comment faire', 'technique', 'ex√©cution', 'mouvement'];

    if (workoutKeywords.some(keyword => message.includes(keyword))) {
      return 'workout_advice';
    }
    if (nutritionKeywords.some(keyword => message.includes(keyword))) {
      return 'nutrition_advice';
    }
    if (injuryKeywords.some(keyword => message.includes(keyword))) {
      return 'injury_prevention';
    }
    if (motivationKeywords.some(keyword => message.includes(keyword))) {
      return 'motivation';
    }
    if (exerciseKeywords.some(keyword => message.includes(keyword))) {
      return 'exercise_question';
    }
    return 'general_question';
  }

  // Conseils d'entra√Ænement
  getWorkoutAdvice(message, context) {
    const advice = [
      "Pour am√©liorer votre forme physique, je recommande de combiner cardio et musculation. Commencez par 3 s√©ances par semaine avec des exercices vari√©s. L'important est la r√©gularit√© !",
      "Un bon entra√Ænement commence toujours par un √©chauffement de 5-10 minutes. Cela pr√©pare votre corps et r√©duit les risques de blessures.",
      "Variez vos entra√Ænements pour √©viter la monotonie. Alternez entre cardio, musculation, flexibilit√© et √©quilibre.",
      "La progression est la cl√© ! Augmentez graduellement l'intensit√© et la dur√©e de vos s√©ances.",
      "√âcoutez votre corps. Si vous ressentez une douleur inhabituelle, arr√™tez-vous et consultez un professionnel.",
    ];
    return advice[Math.floor(Math.random() * advice.length)];
  }

  // Conseils nutritionnels
  getNutritionAdvice(message, context) {
    const advice = [
      "Une alimentation √©quilibr√©e est cruciale pour vos performances ! Privil√©giez les prot√©ines maigres, les glucides complexes et les bonnes graisses.",
      "Hydratez-vous bien avant, pendant et apr√®s l'entra√Ænement. Buvez au moins 2-3 litres d'eau par jour.",
      "Mangez 5-6 petits repas par jour plut√¥t que 3 gros repas. Cela maintient votre m√©tabolisme actif.",
      "Les prot√©ines sont essentielles pour la r√©cup√©ration musculaire. Consommez-en 1.2-1.6g par kg de poids corporel.",
      "Les glucides sont votre carburant ! Mangez-en avant l'entra√Ænement pour avoir de l'√©nergie.",
    ];
    return advice[Math.floor(Math.random() * advice.length)];
  }

  // Pr√©vention des blessures
  getInjuryPreventionAdvice(message, context) {
    const advice = [
      "Pour √©viter les blessures : √©chauffez-vous toujours, progressez graduellement, √©coutez votre corps, et n'oubliez pas les √©tirements.",
      "La r√©cup√©ration est aussi importante que l'entra√Ænement ! Dormez 7-9h par nuit et prenez des jours de repos.",
      "Une bonne technique est primordiale. Mieux vaut faire moins de r√©p√©titions avec une technique parfaite.",
      "√âcoutez les signaux de votre corps. La fatigue, les douleurs articulaires sont des signes d'alerte.",
      "√âquilibrez votre entra√Ænement. Ne n√©gligez pas les √©tirements et le travail de mobilit√©.",
    ];
    return advice[Math.floor(Math.random() * advice.length)];
  }

  // Messages de motivation
  getMotivationalMessage(message, context) {
    const messages = [
      "Chaque petit pas compte ! Vous √™tes plus fort que vous ne le pensez. Continuez ! üí™",
      "Les champions ne sont pas n√©s champions, ils le deviennent. Vous √™tes sur la bonne voie !",
      "Rappelez-vous pourquoi vous avez commenc√©. Vos objectifs vous attendent !",
      "Chaque s√©ance vous rapproche de votre objectif. Vous faites du super travail !",
      "La pers√©v√©rance est la cl√© du succ√®s. Vous √™tes capable de grandes choses !",
    ];
    return messages[Math.floor(Math.random() * messages.length)];
  }

  // R√©ponses sur les exercices
  getExerciseAnswer(message, context) {
    const exercise = this.findExerciseInMessage(message);
    if (exercise) {
      return `Pour bien ex√©cuter les ${exercise.name} : ${exercise.instructions.join(' ')}. ${exercise.tips.join(' ')}`;
    }
    return "Je peux vous aider avec la technique de nombreux exercices. Pouvez-vous √™tre plus sp√©cifique ?";
  }

  // R√©ponse g√©n√©rale
  getGeneralAnswer(message, context) {
    const responses = [
      "Je suis l√† pour vous accompagner dans votre parcours sportif. N'h√©sitez pas √† me poser des questions sp√©cifiques !",
      "Comment puis-je vous aider aujourd'hui ? Je peux vous conseiller sur l'entra√Ænement, la nutrition, ou la r√©cup√©ration.",
      "Votre bien-√™tre est ma priorit√©. Que souhaitez-vous savoir ?",
      "Je suis votre coach personnel ! Posez-moi toutes vos questions sur le sport et la forme physique.",
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  }

  // R√©ponse par d√©faut
  getDefaultResponse(message, context) {
    return "Merci pour votre message ! Je suis l√† pour vous aider avec vos questions sur l'entra√Ænement, la nutrition, et la r√©cup√©ration. Que puis-je faire pour vous ?";
  }

  // Recherche d'exercice dans le message
  findExerciseInMessage(message) {
    return exercises.find(exercise => 
      message.toLowerCase().includes(exercise.name.toLowerCase())
    );
  }

  // G√©n√©ration de plan d'entra√Ænement personnalis√©
  generatePersonalizedWorkout(userProfile) {
    const { level, goals, availableTime, preferences } = userProfile;
    return aiWorkoutGenerator.generateWorkout(level, goals, availableTime, preferences);
  }

  // Recommandations bas√©es sur l'historique
  getPersonalizedRecommendations(userHistory, currentGoals) {
    return aiWorkoutGenerator.getRecommendations(userHistory, currentGoals);
  }

  // Analyse des progr√®s
  analyzeProgress(progressData) {
    const analysis = {
      trends: this.analyzeTrends(progressData),
      recommendations: this.generateProgressRecommendations(progressData),
      achievements: this.checkAchievements(progressData),
    };
    return analysis;
  }

  // Analyse des tendances
  analyzeTrends(data) {
    // Logique d'analyse des tendances
    return {
      improvement: data.workouts > data.previousWorkouts,
      consistency: data.weeklyAverage > 3,
      intensity: data.caloriesPerWorkout > 200,
    };
  }

  // Recommandations de progr√®s
  generateProgressRecommendations(data) {
    const recommendations = [];
    
    if (data.workouts < 3) {
      recommendations.push("Essayez d'augmenter la fr√©quence de vos entra√Ænements √† 3-4 fois par semaine");
    }
    
    if (data.caloriesPerWorkout < 200) {
      recommendations.push("Intensifiez vos s√©ances pour br√ªler plus de calories");
    }
    
    if (data.consistency < 0.8) {
      recommendations.push("Travaillez sur la r√©gularit√© de vos entra√Ænements");
    }
    
    return recommendations;
  }

  // V√©rification des accomplissements
  checkAchievements(data) {
    const achievements = [];
    
    if (data.totalWorkouts >= 10) {
      achievements.push("F√©licitations ! Vous avez compl√©t√© 10 entra√Ænements !");
    }
    
    if (data.streak >= 7) {
      achievements.push("Impressionnant ! 7 jours cons√©cutifs d'entra√Ænement !");
    }
    
    if (data.totalCalories >= 10000) {
      achievements.push("Incroyable ! Vous avez br√ªl√© 10 000 calories !");
    }
    
    return achievements;
  }

  // R√©initialisation de l'historique
  resetConversation() {
    this.conversationHistory = [];
  }

  // Sauvegarde des pr√©f√©rences
  saveUserPreferences(preferences) {
    this.userPreferences = { ...this.userPreferences, ...preferences };
  }

  // R√©cup√©ration des pr√©f√©rences
  getUserPreferences() {
    return this.userPreferences;
  }
}

export default new AIService();